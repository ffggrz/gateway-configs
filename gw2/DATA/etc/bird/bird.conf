#########################
### D E F I N I T I O N S
#########################
#
# lokale Konfigurationsdaten einbinden
include "/etc/bird/local.conf";

# AS
define ggrz_as = 65181; # AS Gera-Greiz

# Bird Routingtabellen
ipv4 table ggrz_v4;     # internes Mesh IPv4
ipv6 table ggrz_v6;     # internes Mesh IPv6
ipv4 table icvpn_v4;    # ICVPN IPv4
ipv6 table icvpn_v6;    # ICVPN IPv6
ipv4 table ffrl_v4;     # Freifunk Rheinland Backbone IPv4
ipv6 table ffrl_v6;     # Freifunk Rheinland Backbone IPv6

#####################
### R O A
#####################
#
roa4 table roa_icvpn_v4;
roa6 table roa_icvpn_v6;

protocol static {
    roa4 { table roa_icvpn_v4; };
    include "/etc/bird/roa/icvpn-roa-v4";
};
protocol static {
    roa6 { table roa_icvpn_v6; };
    include "/etc/bird/roa/icvpn-roa-v6";
};

#####################
### F U N C T I O N S
#####################
#
# Default Route
function is_default_v4() {
    return net ~ [
        0.0.0.0/0
    ];
}
function is_default_v6() {
    return net ~ [
        ::/0
    ];
}

# ULA Adressen
function is_ula_v6() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

# alle Freifunk-Netze
function is_freifunk_v4() {
    return net ~ [
        10.0.0.0/8+
    ];
}

# alle DN42-Netze
function is_dn42_v4() {
    return net ~ [
        172.20.0.0/16+,
        172.22.0.0/15+
    ];
}

# alle Chaos-VPN-Netze
function is_chaosvpn_v4() {
    return net ~ [
        172.31.0.0/16+
    ];
}

# Mesh-Netze Gera-Greiz
function is_ggrz_self_net_v4() {
    return net ~ [
        10.181.0.0/16+
    ];
}

# ICVPN-internes Netz für Mesh Gera-Greiz
function is_ggrz_self_net_v6() {
    return net ~ [
        fdb5:078b:64cc::/48+
    ];
}

# unsere externen NAT-Adressen beim FFRL Backbone
function is_ffrl_nat_v4() {
    return net ~ [
        185.66.194.26/31+,
        185.66.195.82/31+
    ];
}

# öffentliches Netz via Rheinland-Backbone
function is_ffrl_public_nets_v6() {
    return net ~ [
        2a03:2260:100b::/48
    ];
}

# Netze unserer Tunnel zum FFRL Backbone
function is_ffrl_tunnel_nets_v4() {
    return net ~ [
        100.64.3.166/32,
        100.64.3.168/32,
        100.64.3.170/32,
        100.64.3.172/32,
        100.64.3.174/32,
        100.64.3.176/32,
        100.64.3.178/32,
        100.64.3.180/32,
        100.64.3.182/32,
        100.64.3.184/32,
        100.64.3.186/32,
        100.64.3.188/32
    ];
}
function is_ffrl_tunnel_nets_v6() {
    return net ~ [
        2a03:2260:0:1dd::/64,
        2a03:2260:0:1de::/64,
        2a03:2260:0:1df::/64,
        2a03:2260:0:1e0::/64,
        2a03:2260:0:1e1::/64,
        2a03:2260:0:1e2::/64,
        2a03:2260:0:1e3::/64,
        2a03:2260:0:1e4::/64,
        2a03:2260:0:1e5::/64,
        2a03:2260:0:1e6::/64,
        2a03:2260:0:1e7::/64,
        2a03:2260:0:1e8::/64
    ];
}

#####################
### F I L T E R S
#####################
#
#   Import-Filter für alle ICVPN-Peers
filter ebgp_icvpn_import_filter_v4 {
    if is_ggrz_self_net_v4() then reject;       # eigene Netze zurückweisen
    if is_freifunk_v4() then accept;            # interne Freifunk-Netze erlauben
    if is_dn42_v4() then accept;                # DN42-Netze erlauben
    if is_chaosvpn_v4() then accept;            # CaosVPN-Netze erlauben
    if roa_check(roa_icvpn_v4, net, bgp_path.last) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;                                     # alles andere ablehnen
}
filter ebgp_icvpn_import_filter_v6 {
    if is_ggrz_self_net_v6() then reject;       # eigene Netze zurückweisen
    if is_ula_v6() then accept;                 # Netze mit ULA-Adressen erlauben
    if roa_check(roa_icvpn_v6, net, bgp_path.last) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;                                     # alles andere ablehnen
}

# Export-Filter für alle ICVPN-Peers
filter ebgp_icvpn_export_filter_v4 {
    if is_ggrz_self_net_v4() then accept;       # interne Netze Gera-Greiz exportieren
    if source = RTS_BGP then {                  # wenn über BGP gelernt und
        if is_freifunk_v4() || is_dn42_v4() || is_chaosvpn_v4() then {
                                                # wenn es sich um ein Freifunk-, DN42- oder Chaos-Netz handelt
            accept;                             # exportieren
        }
    }
    reject;                                     # alle anderen Routen nicht exportieren
};
filter ebgp_icvpn_export_filter_v6 {
    if is_ggrz_self_net_v6() then accept;       # interne Netze Gera-Greiz exportieren
    if source = RTS_BGP then {                  # wenn über BGP gelernt und
        if is_ula_v6() then {                   # wenn es sich um Netze mit ULA-Adressen handelt
            accept;                             # exportieren
        }
    }
    reject;                                     # alle anderen Routen nicht exportieren
};

# BGP Import Filter für Rheinland
filter ebgp_ffrl_import_filter_v4 {
    if is_default_v4() then accept;
    reject;
}
filter ebgp_ffrl_import_filter_v6 {
    if is_default_v6() then accept;
    reject;
}

# BGP Export Filter für Rheinland
filter ebgp_ffrl_export_filter_v4 {
    if is_ffrl_nat_v4() then accept;
    reject;
}
filter ebgp_ffrl_export_filter_v6 {
    if is_ffrl_public_nets_v6() then accept;
    reject;
}

#####################
### P R O T O C O L S
#####################
#
#   Interfaces abfragen
protocol device {
    scan time 30;
};

#   Device-Routen in Bird-Table icvpn_v{4,6} aufnehmen
protocol direct ggrz_subnets_v4 {
    ipv4 {
        table icvpn_v4;
    };
    interface 10.181.0.0/16;
};
protocol direct ggrz_subnets_v6 {
    ipv6 {
        table icvpn_v6;
    };
    interface fdb5:078b:64cc::/48;
};

#   FFRL Transfernetze in BIRD-Table ffrl_v{4,6} aufnehmen
protocol direct ffrl_tunnel_v4 {
    ipv4 {
        table ffrl_v4;
        import where is_ffrl_tunnel_nets_v4();
    };
    interface "ffrl-*";
}
protocol direct ffrl_tunnel_v6 {
    ipv6 {
        table ffrl_v6;
        import where is_ffrl_tunnel_nets_v6();
    };
    interface "ffrl-*";
}

#   die für dieses Gateway per DHCP vergebenen Client-Adreß-Bereiche extra zum IC-VPN propagieren.
#   Damit werden Pakete für diese Adressen direkt zu diesem Gateway geschickt.
protocol static clients_dhcp_v4 {
    ipv4 {
        table icvpn_v4;
    };
    route pool_dhcp1_v4 via "ggrzBR";
    route pool_dhcp2_v4 via "ggrzBR";
    route pool_dhcp3_v4 via "ggrzBR";
    route pool_dhcp4_v4 via "ggrzBR";
    route net_br_v4 via "ggrzBR";
}

#   IP-NAT-Adressen im FFRL backbone legen wir in die interne BIRD Routing Table
protocol static ffrl_uplink_hostroute {
    ipv4 {
        table ffrl_v4;
    };
    route ffrl_nat_net_v4 reject;
}

#   Wir legen unser Public v6-Netz in die interne BIRD Routing Table ffrl
protocol static ffrl_public_routes {
    ipv6 {
        table ffrl_v6;
    };
    route 2a03:2260:100b::/48 reject;
}

# Bird-Tabelle ICVPN nach GGRZ kopieren
protocol pipe icvpn2ggrz_v4 {
    import none;                        # nichts von ggrz nach icvpn importieren
    export all;                         # alles von icvpn nach ggrz exportieren
    table icvpn_v4;                     # Quelle: icvpn
    peer table ggrz_v4;                 # Ziel: ggrz
};
protocol pipe icvpn2ggrz_v6 {
    import none;                        # nichts von ggrz nach icvpn importieren
    export all;                         # alles von icvpn nach ggrz exportieren
    table icvpn_v6;                     # Quelle: icvpn
    peer table ggrz_v6;                 # Ziel: ggrz
};

# Bird-Tabelle FFRL nach GGRZ kopieren
protocol pipe ffrl2ggrz_v4 {
    import none;                        # nichts von ggrz nach ffrl importieren
    export all;                         # alles von ffrl nach ggrz exportieren
    table ffrl_v4;                      # Quelle: ffrl
    peer table ggrz_v4;                 # Ziel: ggrz
};
protocol pipe ffrl2ggrz_v6 {
    import none;                        # nichts von ggrz nach ffrl importieren
    export all;                         # alles von ffrl nach ggrz exportieren
    table ffrl_v6;                      # Quelle: ffrl
    peer table ggrz_v6;                 # Ziel: ggrz
};

#   Kernel-Routing-Table fürs Mesh-Netz Gera-Greiz
protocol kernel kernel_ggrz_v4 {
    scan time 30;
    ipv4 {
        import none;                    # nichts von Kernel in Bird importieren
        export filter {
            if is_ggrz_self_net_v4() then  # eigene Netze nicht zum Kernel exportieren
                reject;
            krt_prefsrc = addr_br_v4;
            accept;                     # alles andere Bird-ggrz-Tabelle kommt in Kernel
        };
        table ggrz_v4;                  # Bird-Tabelle ggrz
    };
    kernel table 181;               # Kernel-Tabelle ggrz (s. etc/iproute2/rt_tables)
};

protocol kernel kernel_ggrz_v6 {
    scan time 30;
    ipv6 {
        import none;                    # nichts von Kernel in Bird importieren
        export filter {
            if is_ggrz_self_net_v6() then  # eigene Netze nicht zum Kernel exportieren
                reject;
            krt_prefsrc = addr_br_icvpn_v6;
            accept;                     # alles andere Bird-ggrz-Tabelle kommt in Kernel
        };
        table ggrz_v6;                  # Bird-Tabelle ggrz
    };
    kernel table 181;               # Kernel-Tabelle ggrz (s. etc/iproute2/rt_tables)
};


#   Kernel-Routing-Table fürs IC-VPN
protocol kernel kernel_icvpn_v4 {
    scan time 30;
    ipv4 {
        import none;                    # nichts von Kernel in Bird importieren
        export filter {
            if is_ggrz_self_net_v4() then  # eigene Netze nicht zum Kernel exportieren
                reject;
            krt_prefsrc = addr_ic_v4;
            accept;                     # alles andere vom IC-VPN kommt in Kernel
        };
        table icvpn_v4;                 # Bird-Tabelle icvpn
    };
    kernel table 42;                # Kernel-Tabelle icvpn (s. etc/iproute2/rt_tables)
};

protocol kernel kernel_icvpn_v6 {
    scan time 30;
    ipv6 {
        import none;                    # nichts von Kernel in Bird importieren
        export filter {
            if is_ggrz_self_net_v6() then  # eigene Netze nicht zum Kernel exportieren
                reject;
            krt_prefsrc = addr_ic_v6;
            accept;                     # alles andere vom IC-VPN kommt in Kernel
        };
        table icvpn_v6;                 # Bird-Tabelle icvpn
    };
    kernel table 42;                # Kernel-Tabelle icvpn (s. etc/iproute2/rt_tables)
};

# Wir exportieren über Rheinland gelernte Routen in die Kernel Table 83 (ffrl)
protocol kernel kernel_ffrl_v4 {
    scan time 30;
    ipv4 {
        import none;
        export filter {
            krt_prefsrc = ffrl_nat_address_v4;
            accept;
        };
        table ffrl_v4;
    };
    kernel table 83;
};

protocol kernel kernel_ffrl_v6 {
    scan time 30;
    ipv6 {
        import none;
        export filter {
            if is_default_v6() then accept;
##            krt_prefsrc = addr_br_ffrl_v6;
            reject;
        };
        table ffrl_v6;
    };
    kernel table 83;
};


#####################
### T E M P L A T E S
#####################
#
# BGP Template für IC-VPN Peers
template bgp peers {
    local addr_ic_v4 as ggrz_as;                    # als eigene IP die des Tinc-Tunnels verwenden
    ipv4 {
        table icvpn_v4;                             # Bird-Tabelle icvpn
        import keep filtered on;                    # gefilterte Routen nicht löschen,
                                                    # sondern verstecken und nicht propagieren
                                                    # können dadurch mit "show route filtered" angesehen werden
        import filter ebgp_icvpn_import_filter_v4;
        export filter ebgp_icvpn_export_filter_v4;
    };
    ipv6 {
        table icvpn_v6;                             # Bird-Tabelle icvpn
        import keep filtered on;                    # gefilterte Routen nicht löschen,
                                                    # sondern verstecken und nicht propagieren
                                                    # können dadurch mit "show route filtered" angesehen werden
        import filter ebgp_icvpn_import_filter_v6;
        export filter ebgp_icvpn_export_filter_v6;
    };
    direct;                                         # Nachbar ist direkt verbunden
};

# BGP Template für Rheinland Peerings
template bgp ffrl_uplink {
    local as ggrz_as;
    ipv4 {
        table ffrl_v4;
        import keep filtered;
        import filter ebgp_ffrl_import_filter_v4;
        export filter ebgp_ffrl_export_filter_v4;
        next hop self;
    };
    ipv6 {
        table ffrl_v6;
        import keep filtered;
        import filter ebgp_ffrl_import_filter_v6;
        export filter ebgp_ffrl_export_filter_v6;
        next hop self;
    };
    direct;
};


#####################
### P E E R I N G S
#####################
#
include "/etc/bird/peers/ffrl.conf";
include "/etc/bird/peers/icvpn-v4.conf";
include "/etc/bird/peers/icvpn-v6.conf";
